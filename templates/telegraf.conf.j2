# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared plugins.

# Even if a plugin has no configuration, it must be declared in here
# to be active. Declaring a plugin means just specifying the name
# as a section with no variables. To deactivate a plugin, comment
# out the name and any variables.

# Use 'telegraf -config telegraf.toml -test' to see what metrics a config
# file would generate.

# One rule that plugins conform to is wherever a connection string
# can be passed, the values '' and 'localhost' are treated specially.
# They indicate to the plugin to use their own builtin configuration to
# connect to the local system.

# NOTE: The configuration has a few required parameters. They are marked
# with 'required'. Be sure to edit those to make this configuration work.

# Tags can also be specified via a normal map, but only one form at a time:
[global_tags]
{% if telegraf_tags is defined and telegraf_tags != None %}
{% for key, value in telegraf_tags.iteritems()%}
   {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 1000
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false

  # Override default hostname, if empty use os.Hostname()
  hostname = "{{ ansible_hostname }}"

  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[outputs]

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = [ "{{ telegraf_influxdb_urls|join('","') }}" ] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "{{ telegraf_influxdb_database }}" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  ## Retention policy to write to.
  retention_policy = "autogen"
  ## Write consistency (clusters only), can be: "any", "one", "quorom", "all"
  write_consistency = "any"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  timeout = "5s"
{% if telegraf_influxdb_username is defined and telegraf_influxdb_username != None %}
  username = "{{ telegraf_influxdb_username }}"
{% endif %}
{% if telegraf_influxdb_password is defined and telegraf_influxdb_password != None %}
  password = "{{ telegraf_influxdb_password }}"
{% endif %}
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
{% if telegraf_influxdb_user_agent is defined and telegraf_influxdb_user_agent != None %}
  user_agent = "{{ telegraf_influxdb_user_agent }}"
{% endif %}
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
{% if telegraf_influxdb_udp_payload is defined and telegraf_influxdb_udp_payload != None %}
  udp_payload = {{ telegraf_influxdb_udp_payload }}
{% endif %}

  ## Optional SSL Config
{% if telegraf_influxdb_ssl_ca is defined and telegraf_influxdb_ssl_ca != None %}
  # ssl_ca = "{{ telegraf_influxdb_ssl_ca }}"
{% endif %}
{% if telegraf_influxdb_ssl_cert is defined and telegraf_influxdb_ssl_cert != None %}
  # ssl_cert = "{{ telegraf_influxdb_ssl_cert }}"
{% endif %}
{% if telegraf_influxdb_ssl_key is defined and telegraf_influxdb_ssl_key != None %}
  # ssl_key = "{{ telegraf_influxdb_ssl_key }}"
{% endif %}

  ## Use SSL but skip chain & host verification
{% if telegraf_influxdb_insecure_skip_verify is defined and telegraf_influxdb_insecure_skip_verify != None %}
  # insecure_skip_verify = telegraf_influxdb_insecure_skip_verify
{% endif %}

###############################################################################
#                                  PLUGINS                                    #
###############################################################################

{% for plugin in telegraf_plugins %}
[[inputs.{{ plugin.name }}]]
{% if plugin.options is defined %}
{% for key, value in plugin.options.iteritems() %}
{% if value is not mapping %}
{% if value is sequence and value is not string %}
{% if value[0] is number %}
    {{ key }} = [ {{ value|join(', ') }} ]
{% else %}
    {{ key }} = [ "{{ value|join('", "') }}" ]
{% endif %}
{% else %}
{% if value == "true" or value == "false" or value is number %}
    {{ key }} = {{ value }}
{% else %}
    {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for key, value in plugin.options.iteritems() %}
{% if value is mapping %}
    [inputs.{{ plugin.name }}.{{ key }}]
{% for lv2_key, lv2_value in value.iteritems() %}
{% if lv2_value is sequence and lv2_value is not string %}
{% if lv2_value[0] is number %}
      {{ lv2_key }} = [ {{ lv2_value|join(', ') }} ]
{% else %}
      {{ lv2_key }} = [ "{{ lv2_value|join('", "') }}" ]
{% endif %}
{% else %}
{% if lv2_value == "true" or lv2_value == "false" or lv2_value is number %}
      {{ lv2_key }} = {{ lv2_value }}
{% else %}
      {{ lv2_key }} = "{{ lv2_value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{% if telegraf_snmp_enabled -%}
##
## SNMP Input Plugin
##
[[inputs.snmp]]
  name = "{{ telegraf_snmp_name }}"
  agents = [ "192.168.0.1" ]
  interval = "60s"
  timeout = "5s"
  retries = 3
  version = 2
  community = "{{ telegraf_snmp_community }}"
  
  max_repetitions = 50
  
  ## Exclusions
  fielddrop = [ "laErrorFlag", "laErrMessage" ]
  [inputs.snmp.tagdrop]
    diskIODevice = [ "loop*", "ram*" ]

  ## System details
  [[inputs.snmp.field]]
    name = "sysName"
    oid = "SNMPv2-MIB::sysName.0"
    is_tag = true

  ## Host/System Resources
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "HOST-RESOURCES-MIB::hrSystemUptime.0"
  [[inputs.snmp.field]]
    name = "hrSystemNumUsers"
    oid = "HOST-RESOURCES-MIB::hrSystemNumUsers.0"
  [[inputs.snmp.field]]
    name = "hrSystemProcesses"
    oid = "HOST-RESOURCES-MIB::hrSystemProcesses.0"

  ## CPU utilization
  [[inputs.snmp.field]]
    name = "ssCpuRawUser"
    oid = "UCD-SNMP-MIB::ssCpuRawUser.0"
  [[inputs.snmp.field]]
    name = "ssCpuRawSystem"
    oid = "UCD-SNMP-MIB::ssCpuRawSystem.0"
  [[inputs.snmp.field]]
    name = "ssCpuRawIdle"
    oid = "UCD-SNMP-MIB::ssCpuRawIdle.0"
  [[inputs.snmp.field]]
    name = "ssCpuRawWait"
    oid = "UCD-SNMP-MIB::ssCpuRawWait.0"
  [[inputs.snmp.field]]
    name = "ssCpuRawKernel"
    oid = "UCD-SNMP-MIB::ssCpuRawKernel.0"
  [[inputs.snmp.field]]
    name = "ssCpuRawInterrupt"
    oid = "UCD-SNMP-MIB::ssCpuRawInterrupt.0"

  ## System Memory (physical/virtual)
  [[inputs.snmp.field]]
    name = "hrMemorySize"
    oid = "HOST-RESOURCES-MIB::hrMemorySize.0"
  [[inputs.snmp.field]]
    name = "memTotalReal"
    oid = "UCD-SNMP-MIB::memTotalReal.0"
  [[inputs.snmp.field]]
    name = "memAvailReal"
    oid = "UCD-SNMP-MIB::memAvailReal.0"
  [[inputs.snmp.field]]
    name = "memTotalFree"
    oid = "UCD-SNMP-MIB::memTotalFree.0"
  [[inputs.snmp.field]]
    name = "memShared"
    oid = "UCD-SNMP-MIB::memShared.0"
  [[inputs.snmp.field]]
    name = "memBuffer"
    oid = "UCD-SNMP-MIB::memBuffer.0"
  [[inputs.snmp.field]]
    name = "memCached"
    oid = "UCD-SNMP-MIB::memCached.0"

  ## Block (Disk) performance
  [[inputs.snmp.field]]
    name = "ssIORawSent"
    oid = "UCD-SNMP-MIB::ssIORawSent.0"
  [[inputs.snmp.field]]
    name = "ssIORawReceived"
    oid = "UCD-SNMP-MIB::ssIORawReceived.0"
  [[inputs.snmp.table]]
    oid = "UCD-DISKIO-MIB::diskIOTable"
    [[inputs.snmp.table.field]]
      oid = "UCD-DISKIO-MIB::diskIODevice"
      is_tag = true
  
  ## Disk/Partition/Filesystem inventory & usage
  [[inputs.snmp.table]]
    oid = "HOST-RESOURCES-MIB::hrStorageTable"
    [[inputs.snmp.table.field]]
      oid = "HOST-RESOURCES-MIB::hrStorageDescr"
      is_tag = true

  ## Interface metrics
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifTable"
    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifName"
      is_tag = true
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifXTable"
    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifName"
      is_tag = true

  ## IP metrics
  [[inputs.snmp.table]]
    index_as_tag = true
    oid = "IP-MIB::ipSystemStatsTable"

  ## UDP statistics
  #  Datagrams delivered to app
  [[inputs.snmp.field]]
    name = "udpInDatagrams"
    oid = "UDP-MIB::udpInDatagrams.0"
  [[inputs.snmp.field]]
    name = "udpNoPorts"
    oid = "UDP-MIB::udpNoPorts.0"
  [[inputs.snmp.field]]
    name = "udpInErrors"
    oid = "UDP-MIB::udpInErrors.0"
  [[inputs.snmp.field]]
    name = "udpOutDatagrams"
    oid = "UDP-MIB::udpOutDatagrams.0"

  ## TCP statistics
  [[inputs.snmp.field]]
    name = "tcpActiveOpens"
    oid = "TCP-MIB::tcpActiveOpens.0"
  [[inputs.snmp.field]]
    name = "tcpAttemptFails"
    oid = "TCP-MIB::tcpAttemptFails.0"
  [[inputs.snmp.field]]
    name = "tcpEstabResets"
    oid = "TCP-MIB::tcpEstabResets.0"
  [[inputs.snmp.field]]
    name = "tcpCurrEstab"
    oid = "TCP-MIB::tcpCurrEstab.0"
  [[inputs.snmp.field]]
    name = "tcpInErrs"
    oid = "TCP-MIB::tcpInErrs.0"
  [[inputs.snmp.field]]
    name = "tcpOutRsts"
    oid = "TCP-MIB::tcpOutRsts.0"

  ## SNMP metrics
  [[inputs.snmp.field]]
    name = "snmpInPkts"
    oid = "SNMPv2-MIB::snmpInPkts.0"
  [[inputs.snmp.field]]
    name = "snmpInGetRequests"
    oid = "SNMPv2-MIB::snmpInGetRequests.0"
    [[inputs.snmp.field]]
    name = "snmpOutPkts"
    oid = "SNMPv2-MIB::snmpOutPkts.0"
  [[inputs.snmp.field]]
    name = "snmpOutGetRequests"
    oid = "SNMPv2-MIB::snmpOutGetRequests.0"
{% endif %}

###############################################################################
#                              service PLUGINS                                #
###############################################################################